/**
 * Extended fs module with recursive file/directory utils
 */
var fs = require('fs');
var util = require('util');

// reqursive file copy
fs.cpr = (require('ncp')).ncp;
// reqursive find
fs.find = (require('findit')).find;
fs.findSync = (require('findit')).sync;

minimatch = require('minimatch');
fs.findByMaskSync = function (dir, mask) {
    var files = fs.findSync(dir);
    var res = minimatch.match(files, mask, {matchBase: true, nocase: true});
    return res
}
fs.copyFileSync = function (srcFile, destFile) {
    var BUF_LENGTH = 64*1024;
    var buff = new Buffer(BUF_LENGTH);
    var fdr = fs.openSync(srcFile, 'r');
    var fdw = fs.openSync(destFile, 'w');
    var bytesRead = 1;
    var pos = 0;
    while (bytesRead > 0) {
        bytesRead = fs.readSync(fdr, buff, 0, BUF_LENGTH, pos);
        fs.writeSync(fdw, buff, 0, bytesRead);
        pos += bytesRead;
    }
    fs.closeSync(fdr);
    fs.closeSync(fdw);
}
// rm -r
fs.rmr = require('rimraf');
// mkdir -p
fs.mkdirp = require('mkdirp');
// which
fs.which = require('which');
// watch file tree (watch.watchTree, watch.createMonitor)
fs.watch = require('watch');
// fs.exists, fs.existsSync for node.js <= 0.6
if(!fs.exists) fs.exists = require('path').exists;
if(!fs.existsSync) fs.existsSync = require('path').existsSync;

module.exports = fs
