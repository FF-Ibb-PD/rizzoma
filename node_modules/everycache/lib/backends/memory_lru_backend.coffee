_ = require('underscore')
LRU = require('lru-cache')
BaseBackend = require('./base_backend')

class MemoryLruBackend extends BaseBackend
    ###
    Класс, реализующий lru-кэш в памяти.
    ###
    constructor: (args...) ->
        super(args...)

    _init: () ->
        return if @_inited
        super()
        cacheSize = @_options.cacheSize ||= 100
        @_cache = LRU(cacheSize)

    get: (key, callback) ->
        super(key, callback)
        @multipleGet([key], (err, values) ->
            return callback(null) if _.isEmpty(values)
            for own resultKey, value of values
                return callback(null, value) if resultKey == key
        )

    multipleGet: (keys, callback) ->
        super(keys, callback)
        values = {}
        for key in keys
            value = @_cache.get(key)
            continue if not value
            try
                value = JSON.parse(value)
            catch err
                console.warn("Bad JSON format when geting from memory cache by key #{key}")
                continue
            values[key] = value
        callback?(null, values)

    set: (key, value, callback) ->
        super(key, value, callback)
        data = {}
        data[key] = value
        @multipleSet(data, callback)

    multipleSet: (data, callback) ->
        super(data, callback)
        for own key, value of data
            try
                value = JSON.stringify(value)
            catch err
                console.warn("Bad JSON format when setting to memory cache by key #{key}")
                continue
            @_cache.set(key, value)
        callback?(null)

    remove: (key, callback) ->
        super(key, callback)
        @multipleRemove([key], callback)

    multipleRemove: (keys, callback) ->
        super(keys, callback)
        for key in keys
            @_cache.del(key)
        callback?(null)

    clear: (callback) ->
        super(callback)
        @_cache.reset()
        callback?(null)

module.exports = MemoryLruBackend
