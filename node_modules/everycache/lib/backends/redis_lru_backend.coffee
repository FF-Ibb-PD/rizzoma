BaseBackend = require('./base_backend')
redis = require('redis')


class RedisLruBackend extends BaseBackend
    ###
    Класс, реализующий lru-кэш в памяти.
    ###
    constructor: (args...) ->
        super(args...)

    _init: (callback) ->
        return callback() if @_inited
        super()
        port = @_options.port || 6379
        host = @_options.host || '127.0.0.1'
        @_client = redis.createClient(port, host)
        @_client.on("connect", () =>
            if (@_options.db)
                @_client.send_anyways = true;
                @_client.select(@_options.db);
                @_client.send_anyways = false;
            callback?()
            callback = null
        )

    get: (key, callback) ->
        super(key, () =>
            @_client.get(key, (err, res) ->
                return callback?(err, null) if err
                val = null
                try
                    val = JSON.parse(res)
                catch err
                    console.warn("Bad JSON format when geting from redis cache by key #{key}")
                callback?(null, val)
            )
        )

    multipleGet: (keys, callback) ->
        super(keys, () =>
            @_client.mget(keys, (err, res) ->
                return callback(err, null) if err
                data = {}
                for value, i in res
                    key = keys[i]
                    try
                        data[key] = JSON.parse(value) if value?
                    catch err
                        console.warn("Bad JSON format when geting from redis cache by key #{key}")
                callback(null, data)
            )
        )

    set: (key, value, callback) ->
        super(key, value, () =>
            try
                value = JSON.stringify(value)
            catch err
                console.warn("Bad JSON format when setting to redis cache by #{key}")
                return callback?(null, null)
            @_client.set(key, value, callback)
        )


    multipleSet: (data, callback) ->
        super(data, () =>
            params = []
            for own key, value of data
                try
                    value = JSON.stringify(value)
                catch err
                    console.warn("Bad JSON format when setting to redis cache by #{key}")
                    continue
                params.push(key)
                params.push(value)
            @_client.mset(params, callback)
        )

    remove: (key, callback) ->
        super(key, () =>
            @multipleRemove([key], callback)
        )

    multipleRemove: (keys, callback) ->
        super(keys, () =>
            @_client.del(keys, callback)
        )

    clear: (callback) ->
        super(() =>
            @_client.flushdb(callback)
        )

module.exports = RedisLruBackend
